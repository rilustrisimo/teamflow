import { useState } from 'react'
import { motion } from 'framer-motion'
import { useNavigate } from 'react-router-dom'
import { useAuth } from '../context/AuthContext'
import { useAppContext } from '../context/AppContext'
import AdminDashboard from '../components/dashboards/AdminDashboard'
import TeamMemberDashboard from '../components/dashboards/TeamMemberDashboard'
import ClientDashboard from '../components/dashboards/ClientDashboard'
import { 
  Clock, 
  Users, 
  BarChart3, 
  FileText, 
  Settings,
  Bell,
  Search,
  Plus,
  Play,
  Pause,
  User,
  LogOut,
  Home,
  Receipt,
  Zap,
  X,
  Save,
  DollarSign
} from 'lucide-react'
import TimeTracker from '../components/TimeTracker'
import ProjectBoard from '../components/ProjectBoard'
import Reports from '../components/Reports'
import Invoices from '../components/Invoices'
import Clients from '../components/Clients'
import FinancialDashboard from '../components/FinancialDashboard'

const Dashboard = () => {
  const navigate = useNavigate()
  const { signOut } = useAuth()
  const { 
    timer, 
    setTimer, 
    startTimer, 
    stopTimer, 
    projects, 
    clients, 
    tasks, 
    timeEntries,
    addProject,
    addClient,
    settings,
    updateSettings,
    currentUser
  } = useAppContext()
  
  const [activeTab, setActiveTab] = useState('dashboard')
  const [showNewProjectModal, setShowNewProjectModal] = useState(false)
  const [showNewClientModal, setShowNewClientModal] = useState(false)
  const [showSettings, setShowSettings] = useState(false)
  const [newProject, setNewProject] = useState({
    name: '',
    client: '',
    description: '',
    dueDate: '',
    budget: ''
  })
  const [newClient, setNewClient] = useState({
    name: '',
    email: '',
    company: '',
    phone: ''
  })

  // Stats calculation
  const todayEntries = timeEntries.filter(entry => entry.date === new Date().toISOString().split('T')[0])
  const todayHours = todayEntries.reduce((sum, entry) => sum + entry.duration, 0)
  const thisWeekHours = timeEntries
    .filter(entry => {
      const entryDate = new Date(entry.date)
      const today = new Date()
      const weekStart = new Date(today.setDate(today.getDate() - today.getDay()))
      const isCurrentUserData = currentUser.role === 'client' 
        ? entry.client === currentUser.clientCompany 
        : true
      return entryDate >= weekStart && isCurrentUserData
    })
    .reduce((sum, entry) => sum + entry.duration, 0)

  // Filter data based on user role
  const getFilteredProjects = () => {
    if (currentUser.role === 'client') {
      return projects.filter(project => project.client === currentUser.clientCompany)
    }
    return projects
  }

  const getFilteredTasks = () => {
    if (currentUser.role === 'client') {
      return tasks.filter(task => task.client === currentUser.clientCompany)
    }
    return tasks
  }

  const filteredProjects = getFilteredProjects()
  const filteredTasks = getFilteredTasks()

  const stats = currentUser.role === 'client' 
    ? [
        { label: 'Active Projects', value: filteredProjects.filter(p => p.status === 'active').length.toString(), icon: FileText, color: 'text-primary' },
        { label: 'Total Tasks', value: filteredTasks.length.toString(), icon: Users, color: 'text-green-500' },
        { label: 'Completed Tasks', value: filteredTasks.filter(t => t.status === 'done').length.toString(), icon: BarChart3, color: 'text-yellow-500' },
        { label: 'This Week Hours', value: `${thisWeekHours.toFixed(1)}h`, icon: Clock, color: 'text-secondary' }
      ]
    : currentUser.role === 'team-member'
    ? [
        { label: 'Hours Today', value: `${todayHours.toFixed(1)}h`, icon: Clock, color: 'text-secondary' },
        { label: 'This Week', value: `${thisWeekHours.toFixed(1)}h`, icon: BarChart3, color: 'text-yellow-500' },
        { label: 'My Tasks', value: filteredTasks.filter(t => t.assignedTo === currentUser.name).length.toString(), icon: FileText, color: 'text-primary' },
        { label: 'Completed', value: filteredTasks.filter(t => t.assignedTo === currentUser.name && t.status === 'done').length.toString(), icon: Users, color: 'text-green-500' }
      ]
    : [
        { label: 'Hours Today', value: `${todayHours.toFixed(1)}h`, icon: Clock, color: 'text-secondary' },
        { label: 'Active Projects', value: projects.filter(p => p.status === 'active').length.toString(), icon: FileText, color: 'text-primary' },
        { label: 'Team Members', value: '8', icon: Users, color: 'text-green-500' },
        { label: 'This Week', value: `${thisWeekHours.toFixed(1)}h`, icon: BarChart3, color: 'text-yellow-500' }
      ]

  // Navigation items based on user role
  const getNavigationItems = () => {
    if (currentUser.role === 'client') {
      return [
        { id: 'dashboard', label: 'Dashboard', icon: Home },
        { id: 'project-board', label: 'Project Management', icon: FileText },
        { id: 'reports', label: 'Reports', icon: BarChart3 },
        { id: 'invoices', label: 'Invoices', icon: Receipt }
      ]
    }
    
    if (currentUser.role === 'team-member') {
      return [
        { id: 'dashboard', label: 'Dashboard', icon: Home },
        { id: 'project-board', label: 'Project Management Board', icon: FileText },
        { id: 'reports', label: 'My Earnings', icon: BarChart3 }
      ]
    }
    
    return [
      { id: 'dashboard', label: 'Dashboard', icon: Home },
      { id: 'financials', label: 'Financials', icon: DollarSign },
      { id: 'time-tracker', label: 'Time Tracker', icon: Clock },
      { id: 'project-board', label: 'Project Management Board', icon: FileText },
      { id: 'clients', label: 'Clients', icon: Users },
      { id: 'reports', label: 'Reports', icon: BarChart3 },
      { id: 'invoices', label: 'Invoices', icon: Receipt }
    ]
  }

  const navigationItems = getNavigationItems()

  const formatTime = (seconds: number) => {
    const hours = Math.floor(seconds / 3600)
    const minutes = Math.floor((seconds % 3600) / 60)
    const secs = seconds % 60
    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`
  }

  const handleStartStop = () => {
    if (timer.isTracking) {
      stopTimer()
    } else {
      startTimer()
    }
  }

  const handleLogout = async () => {
    await signOut()
    navigate('/')
  }

  const createNewProject = () => {
    if (!newProject.name || !newProject.client) {
      alert('Please fill in project name and client')
      return
    }

    try {
      addProject({
        name: newProject.name,
        client: newProject.client,
        description: newProject.description,
        dueDate: newProject.dueDate,
        budget: newProject.budget
      })
      
      setNewProject({
        name: '',
        client: '',
        description: '',
        dueDate: '',
        budget: ''
      })
      setShowNewProjectModal(false)
      alert(`Project "${newProject.name}" created successfully!`)
    } catch (error) {
      console.error('Error creating project:', error)
    }
  }

  const createNewClient = () => {
    if (!newClient.name || !newClient.email) {
      alert('Please fill in client name and email')
      return
    }

    try {
      addClient({
        name: newClient.name,
        email: newClient.email,
        company: newClient.company || newClient.name,
        phone: newClient.phone,
        status: 'active'
      })
      
      setNewClient({
        name: '',
        email: '',
        company: '',
        phone: ''
      })
      setShowNewClientModal(false)
      alert(`Client "${newClient.name}" created successfully!`)
    } catch (error) {
      console.error('Error creating client:', error)
    }
  }

  const saveSettings = () => {
    setShowSettings(false)
    alert('Settings saved successfully!')
  }

  // Filter tasks based on selected project and client
  const getFilteredTasksForTimer = () => {
    const availableTasks = currentUser.role === 'client' ? filteredTasks : tasks
    return availableTasks.filter(task => {
      if (timer.selectedProject && task.project !== timer.selectedProject) return false
      if (timer.selectedClient && task.client !== timer.selectedClient) return false
      return true
    })
  }

  const renderContent = () => {
    switch (activeTab) {
      case 'dashboard':
        return (
          <div className="space-y-8">
            {/* Time Tracker Widget - Only for non-client users */}
            {currentUser.role !== 'client' && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="bg-dark-200 rounded-xl p-6 border border-dark-300"
              >
                <div className="flex items-center justify-between mb-6">
                  <div>
                    <h2 className="text-xl font-semibold text-white mb-2">Current Session</h2>
                    <div className="text-3xl font-mono text-secondary">{formatTime(timer.currentTime)}</div>
                    {timer.isTracking && (
                      <div className="text-sm text-green-400 mt-1">
                        ⏱️ Timer running for {timer.selectedTask}
                      </div>
                    )}
                  </div>
                  <div className="flex items-center space-x-4">
                    <button
                      onClick={handleStartStop}
                      className={`flex items-center space-x-2 px-6 py-3 rounded-lg font-semibold transition-all duration-200 ${
                        timer.isTracking 
                          ? 'bg-red-500 hover:bg-red-600 text-white' 
                          : 'bg-secondary hover:bg-secondary/90 text-white'
                      }`}
                    >
                      {timer.isTracking ? <Pause className="w-5 h-5" /> : <Play className="w-5 h-5" />}
                      <span>{timer.isTracking ? 'Stop Timer' : 'Start Timer'}</span>
                    </button>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-dark-500 mb-2">Client *</label>
                    <select 
                      value={timer.selectedClient}
                      onChange={(e) => {
                        setTimer({
                          selectedClient: e.target.value,
                          selectedProject: '',
                          selectedTask: ''
                        })
                      }}
                      className="w-full bg-dark-300 border border-dark-400 rounded-lg px-4 py-2 text-white"
                      disabled={timer.isTracking}
                    >
                      <option value="">Select client</option>
                      {clients.map(client => (
                        <option key={client.id} value={client.company}>{client.company}</option>
                      ))}
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-dark-500 mb-2">Project *</label>
                    <select 
                      value={timer.selectedProject}
                      onChange={(e) => {
                        setTimer({
                          selectedProject: e.target.value,
                          selectedTask: ''
                        })
                      }}
                      className="w-full bg-dark-300 border border-dark-400 rounded-lg px-4 py-2 text-white"
                      disabled={timer.isTracking || !timer.selectedClient}
                    >
                      <option value="">Select project</option>
                      {projects
                        .filter(project => project.client === timer.selectedClient)
                        .map(project => (
                          <option key={project.id} value={project.name}>{project.name}</option>
                        ))}
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-dark-500 mb-2">Task *</label>
                    <select 
                      value={timer.selectedTask}
                      onChange={(e) => setTimer({ selectedTask: e.target.value })}
                      className="w-full bg-dark-300 border border-dark-400 rounded-lg px-4 py-2 text-white"
                      disabled={timer.isTracking || !timer.selectedProject}
                    >
                      <option value="">Select task</option>
                      {getFilteredTasksForTimer().map(task => (
                        <option key={task.id} value={task.title}>{task.title}</option>
                      ))}
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-dark-500 mb-2">Description</label>
                    <input
                      type="text"
                      value={timer.description}
                      onChange={(e) => setTimer({ description: e.target.value })}
                      placeholder="What are you working on?"
                      className="w-full bg-dark-300 border border-dark-400 rounded-lg px-4 py-2 text-white placeholder-dark-500"
                    />
                  </div>
                </div>
              </motion.div>
            )}

            {/* Stats Grid */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              {stats.map((stat, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                  className="bg-dark-200 rounded-xl p-6 border border-dark-300"
                >
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-dark-500 text-sm">{stat.label}</p>
                      <p className="text-2xl font-bold text-white">{stat.value}</p>
                    </div>
                    <stat.icon className={`w-8 h-8 ${stat.color}`} />
                  </div>
                </motion.div>
              ))}
            </div>

            <div className="grid lg:grid-cols-2 gap-8">
              {/* Project List */}
              <motion.div
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.3 }}
                className="bg-dark-200 rounded-xl p-6 border border-dark-300"
              >
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-xl font-semibold text-white">
                    {currentUser.role === 'client' ? 'My Projects' : 'Project List'}
                  </h3>
                  <button 
                    onClick={() => setShowNewProjectModal(true)}
                    className="bg-secondary hover:bg-secondary/90 text-white font-semibold py-2 px-4 rounded-lg transition-all duration-200 text-sm flex items-center space-x-2"
                  >
                    <Plus className="w-4 h-4" />
                    <span>New Project</span>
                  </button>
                </div>
                <div className="space-y-4 max-h-80 overflow-y-auto">
                  {filteredProjects.map((project, index) => (
                    <div key={project.id} className="flex items-center justify-between p-4 bg-dark-300 rounded-lg">
                      <div>
                        <h4 className="font-medium text-white">{project.name}</h4>
                        <p className="text-sm text-dark-500">{project.client}</p>
                        <p className="text-xs text-dark-500">{project.description}</p>
                      </div>
                      <div className="text-right">
                        <p className="font-medium text-white">{project.totalHours}h</p>
                        <span className={`text-xs px-2 py-1 rounded-full ${
                          project.status === 'completed' ? 'bg-green-500/20 text-green-400' :
                          project.status === 'active' ? 'bg-secondary/20 text-secondary' :
                          'bg-yellow-500/20 text-yellow-400'
                        }`}>
                          {project.status}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              </motion.div>

              {/* Quick Actions */}
              <motion.div
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.4 }}
                className="bg-dark-200 rounded-xl p-6 border border-dark-300"
              >
                <h3 className="text-xl font-semibold text-white mb-6">Quick Actions</h3>
                <div className="grid grid-cols-2 gap-4">
                  {currentUser.role === 'client' ? (
                    <>
                      <button 
                        onClick={() => setShowNewProjectModal(true)}
                        className="p-4 bg-dark-300 hover:bg-dark-400 rounded-lg transition-colors duration-200 text-left"
                      >
                        <Plus className="w-8 h-8 text-secondary mb-2" />
                        <h4 className="font-medium text-white">Add Project</h4>
                        <p className="text-sm text-dark-500">Create new project</p>
                      </button>
                      <button 
                        onClick={() => setActiveTab('project-board')}
                        className="p-4 bg-dark-300 hover:bg-dark-400 rounded-lg transition-colors duration-200 text-left"
                      >
                        <FileText className="w-8 h-8 text-primary mb-2" />
                        <h4 className="font-medium text-white">Add Task</h4>
                        <p className="text-sm text-dark-500">Create new task</p>
                      </button>
                      <button 
                        onClick={() => setActiveTab('reports')}
                        className="p-4 bg-dark-300 hover:bg-dark-400 rounded-lg transition-colors duration-200 text-left"
                      >
                        <BarChart3 className="w-8 h-8 text-yellow-500 mb-2" />
                        <h4 className="font-medium text-white">View Reports</h4>
                        <p className="text-sm text-dark-500">Project reports</p>
                      </button>
                      <button 
                        onClick={() => setActiveTab('invoices')}
                        className="p-4 bg-dark-300 hover:bg-dark-400 rounded-lg transition-colors duration-200 text-left"
                      >
                        <Receipt className="w-8 h-8 text-green-500 mb-2" />
                        <h4 className="font-medium text-white">View Invoices</h4>
                        <p className="text-sm text-dark-500">My invoices</p>
                      </button>
                    </>
                  ) : currentUser.role === 'team-member' ? (
                    <>
                      <button 
                        onClick={() => setActiveTab('project-board')}
                        className="p-4 bg-dark-300 hover:bg-dark-400 rounded-lg transition-colors duration-200 text-left"
                      >
                        <FileText className="w-8 h-8 text-secondary mb-2" />
                        <h4 className="font-medium text-white">Project Board</h4>
                        <p className="text-sm text-dark-500">View all tasks</p>
                      </button>
                      <button 
                        onClick={() => setActiveTab('reports')}
                        className="p-4 bg-dark-300 hover:bg-dark-400 rounded-lg transition-colors duration-200 text-left"
                      >
                        <BarChart3 className="w-8 h-8 text-green-500 mb-2" />
                        <h4 className="font-medium text-white">My Earnings</h4>
                        <p className="text-sm text-dark-500">View hours & pay</p>
                      </button>
                      <button 
                        onClick={() => setActiveTab('project-board')}
                        className="p-4 bg-dark-300 hover:bg-dark-400 rounded-lg transition-colors duration-200 text-left"
                      >
                        <Users className="w-8 h-8 text-primary mb-2" />
                        <h4 className="font-medium text-white">My Tasks</h4>
                        <p className="text-sm text-dark-500">Assigned to me</p>
                      </button>
                      <button 
                        onClick={() => setActiveTab('project-board')}
                        className="p-4 bg-dark-300 hover:bg-dark-400 rounded-lg transition-colors duration-200 text-left"
                      >
                        <Clock className="w-8 h-8 text-yellow-500 mb-2" />
                        <h4 className="font-medium text-white">Time Entries</h4>
                        <p className="text-sm text-dark-500">View my hours</p>
                      </button>
                    </>
                  ) : (
                    <>
                      <button 
                        onClick={() => setActiveTab('project-board')}
                        className="p-4 bg-dark-300 hover:bg-dark-400 rounded-lg transition-colors duration-200 text-left"
                      >
                        <FileText className="w-8 h-8 text-secondary mb-2" />
                        <h4 className="font-medium text-white">Project Board</h4>
                        <p className="text-sm text-dark-500">Manage tasks</p>
                      </button>
                      <button 
                        onClick={() => setShowNewClientModal(true)}
                        className="p-4 bg-dark-300 hover:bg-dark-400 rounded-lg transition-colors duration-200 text-left"
                      >
                        <Users className="w-8 h-8 text-primary mb-2" />
                        <h4 className="font-medium text-white">Add Client</h4>
                        <p className="text-sm text-dark-500">Add new client</p>
                      </button>
                      <button 
                        onClick={() => setActiveTab('time-tracker')}
                        className="p-4 bg-dark-300 hover:bg-dark-400 rounded-lg transition-colors duration-200 text-left"
                      >
                        <Clock className="w-8 h-8 text-green-500 mb-2" />
                        <h4 className="font-medium text-white">Time Tracker</h4>
                        <p className="text-sm text-dark-500">Track time</p>
                      </button>
                      <button 
                        onClick={() => setActiveTab('reports')}
                        className="p-4 bg-dark-300 hover:bg-dark-400 rounded-lg transition-colors duration-200 text-left"
                      >
                        <BarChart3 className="w-8 h-8 text-yellow-500 mb-2" />
                        <h4 className="font-medium text-white">Reports</h4>
                        <p className="text-sm text-dark-500">Generate reports</p>
                      </button>
                    </>
                  )}
                </div>
              </motion.div>
            </div>
          </div>
        )
      case 'time-tracker':
        return <TimeTracker />
      case 'project-board':
        return <ProjectBoard />
      case 'clients':
        return <Clients />
      case 'reports':
        return <Reports />
      case 'invoices':
        return <Invoices />
      case 'financials':
        return <FinancialDashboard />
      default:
        return null
    }
  }

  return (
    <div className="min-h-screen bg-dark-100 flex">
      {/* Left Sidebar Navigation */}
      <aside className="w-64 bg-dark-200 border-r border-dark-300 flex flex-col">
        {/* Logo */}
        <div className="p-6 border-b border-dark-300">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-gradient-to-r from-primary to-secondary rounded-lg flex items-center justify-center">
              <Zap className="w-6 h-6 text-white" />
            </div>
            <span className="text-xl font-bold text-white">TeamFlow</span>
          </div>
        </div>

        {/* Navigation Items */}
        <nav className="flex-1 p-6">
          <div className="space-y-2">
            {navigationItems.map((item) => (
              <button
                key={item.id}
                onClick={() => setActiveTab(item.id)}
                className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg transition-all duration-200 text-left ${
                  activeTab === item.id
                    ? 'bg-secondary text-white shadow-lg'
                    : 'text-dark-500 hover:text-white hover:bg-dark-300'
                }`}
              >
                <item.icon className="w-5 h-5" />
                <span className="font-medium">{item.label}</span>
              </button>
            ))}
          </div>
        </nav>

        {/* User Profile & Logout */}
        <div className="p-6 border-t border-dark-300">
          <div className="flex items-center space-x-3 mb-4">
            <div className="w-10 h-10 bg-secondary rounded-full flex items-center justify-center">
              <User className="w-6 h-6 text-white" />
            </div>
            <div>
              <p className="text-white font-medium">{currentUser.name}</p>
              <p className="text-dark-500 text-sm capitalize">{currentUser.role.replace('-', ' ')}</p>
              {currentUser.role === 'client' && (
                <p className="text-dark-500 text-xs">{currentUser.clientCompany}</p>
              )}
            </div>
          </div>
          <div className="space-y-2">
            {currentUser.role !== 'client' && (
              <button 
                onClick={() => setShowSettings(true)}
                className="w-full flex items-center space-x-3 px-4 py-2 text-dark-500 hover:text-white hover:bg-dark-300 rounded-lg transition-colors duration-200"
              >
                <Settings className="w-4 h-4" />
                <span>Settings</span>
              </button>
            )}
            <button 
              onClick={handleLogout}
              className="w-full flex items-center space-x-3 px-4 py-2 text-dark-500 hover:text-red-400 hover:bg-dark-300 rounded-lg transition-colors duration-200"
            >
              <LogOut className="w-4 h-4" />
              <span>Logout</span>
            </button>
          </div>
        </div>
      </aside>

      {/* Main Content Area */}
      <div className="flex-1 flex flex-col">
        {/* Top Header */}
        <header className="bg-dark-200 border-b border-dark-300 px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <h1 className="text-2xl font-bold text-white capitalize">
                {activeTab.replace('-', ' ')}
              </h1>
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-dark-500" />
                <input
                  type="text"
                  placeholder="Search projects, tasks..."
                  className="pl-10 pr-4 py-2 bg-dark-300 border border-dark-400 rounded-lg text-white placeholder-dark-500 focus:outline-none focus:border-secondary w-64"
                />
              </div>
            </div>
            
            <div className="flex items-center space-x-4">
              <button className="relative p-2 text-dark-500 hover:text-white transition-colors duration-200">
                <Bell className="w-6 h-6" />
                <span className="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full"></span>
              </button>
            </div>
          </div>
        </header>

        {/* Main Content */}
        <main className="flex-1 p-6 overflow-auto">
          {renderContent()}
        </main>
      </div>

      {/* Settings Modal */}
      {showSettings && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <motion.div
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            className="bg-dark-200 rounded-xl p-6 max-w-2xl w-full max-h-[90vh] overflow-y-auto"
          >
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-xl font-bold text-white">Settings</h3>
              <button
                onClick={() => setShowSettings(false)}
                className="text-dark-500 hover:text-white"
              >
                <X className="w-6 h-6" />
              </button>
            </div>

            <div className="space-y-6">
              {/* Profile Settings */}
              <div>
                <h4 className="font-medium text-white mb-4">Profile Settings</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-dark-500 mb-1">Full Name</label>
                    <input
                      type="text"
                      defaultValue={currentUser.name}
                      className="w-full bg-dark-300 border border-dark-400 rounded-lg px-3 py-2 text-white"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-dark-500 mb-1">Role</label>
                    <select 
                      value={currentUser.role}
                      className="w-full bg-dark-300 border border-dark-400 rounded-lg px-3 py-2 text-white"
                      disabled
                    >
                      <option value="manager">Manager</option>
                      <option value="team-member">Team Member</option>
                      <option value="admin">Admin</option>
                      <option value="client">Client</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-dark-500 mb-1">Timezone</label>
                    <select 
                      value={settings.workSchedule.timezone}
                      onChange={(e) => updateSettings({
                        workSchedule: { ...settings.workSchedule, timezone: e.target.value }
                      })}
                      className="w-full bg-dark-300 border border-dark-400 rounded-lg px-3 py-2 text-white"
                    >
                      <option value="America/New_York">Eastern Time (EST)</option>
                      <option value="America/Chicago">Central Time (CST)</option>
                      <option value="America/Denver">Mountain Time (MST)</option>
                      <option value="America/Los_Angeles">Pacific Time (PST)</option>
                    </select>
                  </div>
                </div>
              </div>

              {/* Work Schedule */}
              <div>
                <h4 className="font-medium text-white mb-4">Work Schedule</h4>
                <div className="space-y-3">
                  {Object.entries(settings.workSchedule).map(([day, schedule]) => {
                    if (day === 'timezone') return null
                    return (
                      <div key={day} className="flex items-center space-x-4">
                        <div className="w-20">
                          <input
                            type="checkbox"
                            checked={schedule.enabled}
                            onChange={(e) => updateSettings({
                              workSchedule: {
                                ...settings.workSchedule,
                                [day]: { ...schedule, enabled: e.target.checked }
                              }
                            })}
                            className="rounded mr-2"
                          />
                          <span className="text-white text-sm capitalize">{day}</span>
                        </div>
                        <div className="flex items-center space-x-2">
                          <input
                            type="time"
                            value={schedule.start}
                            onChange={(e) => updateSettings({
                              workSchedule: {
                                ...settings.workSchedule,
                                [day]: { ...schedule, start: e.target.value }
                              }
                            })}
                            disabled={!schedule.enabled}
                            className="bg-dark-300 border border-dark-400 rounded px-2 py-1 text-white text-sm"
                          />
                          <span className="text-dark-500">to</span>
                          <input
                            type="time"
                            value={schedule.end}
                            onChange={(e) => updateSettings({
                              workSchedule: {
                                ...settings.workSchedule,
                                [day]: { ...schedule, end: e.target.value }
                              }
                            })}
                            disabled={!schedule.enabled}
                            className="bg-dark-300 border border-dark-400 rounded px-2 py-1 text-white text-sm"
                          />
                        </div>
                      </div>
                    )
                  })}
                </div>
              </div>

              {/* Reminder Settings */}
              <div>
                <h4 className="font-medium text-white mb-4">Time Tracking Reminders</h4>
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <span className="text-dark-500">Enable work hour reminders</span>
                    <input 
                      type="checkbox" 
                      checked={settings.reminderEnabled}
                      onChange={(e) => updateSettings({ reminderEnabled: e.target.checked })}
                      className="rounded" 
                    />
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-dark-500">Reminder interval (minutes)</span>
                    <select
                      value={settings.reminderInterval}
                      onChange={(e) => updateSettings({ reminderInterval: Number(e.target.value) })}
                      disabled={!settings.reminderEnabled}
                      className="bg-dark-300 border border-dark-400 rounded px-3 py-1 text-white text-sm"
                    >
                      <option value={5}>5 minutes</option>
                      <option value={10}>10 minutes</option>
                      <option value={15}>15 minutes</option>
                      <option value={30}>30 minutes</option>
                      <option value={60}>1 hour</option>
                    </select>
                  </div>
                </div>
              </div>

              {/* General Preferences */}
              <div>
                <h4 className="font-medium text-white mb-4">Preferences</h4>
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <span className="text-dark-500">Email Notifications</span>
                    <input type="checkbox" defaultChecked className="rounded" />
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-dark-500">Auto-start Timer</span>
                    <input type="checkbox" className="rounded" />
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-dark-500">Dark Mode</span>
                    <input type="checkbox" defaultChecked className="rounded" />
                  </div>
                </div>
              </div>
            </div>

            <div className="flex justify-end space-x-3 mt-6">
              <button
                onClick={() => setShowSettings(false)}
                className="px-4 py-2 text-dark-500 hover:text-white transition-colors duration-200"
              >
                Cancel
              </button>
              <button
                onClick={saveSettings}
                className="flex items-center space-x-2 bg-secondary hover:bg-secondary/90 text-white font-semibold py-2 px-4 rounded-lg transition-all duration-200"
              >
                <Save className="w-4 h-4" />
                <span>Save Changes</span>
              </button>
            </div>
          </motion.div>
        </div>
      )}

      {/* New Project Modal */}
      {showNewProjectModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <motion.div
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            className="bg-dark-200 rounded-xl p-6 max-w-md w-full"
          >
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-xl font-bold text-white">Create New Project</h3>
              <button
                onClick={() => setShowNewProjectModal(false)}
                className="text-dark-500 hover:text-white"
              >
                <X className="w-6 h-6" />
              </button>
            </div>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-dark-500 mb-2">Project Name *</label>
                <input
                  type="text"
                  value={newProject.name}
                  onChange={(e) => setNewProject({...newProject, name: e.target.value})}
                  className="w-full bg-dark-300 border border-dark-400 rounded-lg px-4 py-2 text-white"
                  placeholder="Enter project name"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-dark-500 mb-2">Client *</label>
                <select
                  value={newProject.client}
                  onChange={(e) => setNewProject({...newProject, client: e.target.value})}
                  className="w-full bg-dark-300 border border-dark-400 rounded-lg px-4 py-2 text-white"
                  disabled={currentUser.role === 'client'}
                >
                  {currentUser.role === 'client' ? (
                    <option value={currentUser.clientCompany}>{currentUser.clientCompany}</option>
                  ) : (
                    <>
                      <option value="">Select a client</option>
                      {clients.map(client => (
                        <option key={client.id} value={client.company}>{client.company}</option>
                      ))}
                    </>
                  )}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-dark-500 mb-2">Description</label>
                <textarea
                  value={newProject.description}
                  onChange={(e) => setNewProject({...newProject, description: e.target.value})}
                  className="w-full bg-dark-300 border border-dark-400 rounded-lg px-4 py-2 text-white"
                  rows={3}
                  placeholder="Project description"
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-dark-500 mb-2">Due Date</label>
                  <input
                    type="date"
                    value={newProject.dueDate}
                    onChange={(e) => setNewProject({...newProject, dueDate: e.target.value})}
                    className="w-full bg-dark-300 border border-dark-400 rounded-lg px-4 py-2 text-white"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-dark-500 mb-2">Budget</label>
                  <input
                    type="number"
                    value={newProject.budget}
                    onChange={(e) => setNewProject({...newProject, budget: e.target.value})}
                    className="w-full bg-dark-300 border border-dark-400 rounded-lg px-4 py-2 text-white"
                    placeholder="$0"
                  />
                </div>
              </div>
            </div>

            <div className="flex justify-end space-x-3 mt-6">
              <button
                onClick={() => setShowNewProjectModal(false)}
                className="px-4 py-2 text-dark-500 hover:text-white transition-colors duration-200"
              >
                Cancel
              </button>
              <button
                onClick={createNewProject}
                className="bg-secondary hover:bg-secondary/90 text-white font-semibold py-2 px-4 rounded-lg transition-all duration-200"
              >
                Create Project
              </button>
            </div>
          </motion.div>
        </div>
      )}

      {/* New Client Modal */}
      {showNewClientModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <motion.div
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            className="bg-dark-200 rounded-xl p-6 max-w-md w-full"
          >
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-xl font-bold text-white">Add New Client</h3>
              <button
                onClick={() => setShowNewClientModal(false)}
                className="text-dark-500 hover:text-white"
              >
                <X className="w-6 h-6" />
              </button>
            </div>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-dark-500 mb-2">Client Name *</label>
                <input
                  type="text"
                  value={newClient.name}
                  onChange={(e) => setNewClient({...newClient, name: e.target.value})}
                  className="w-full bg-dark-300 border border-dark-400 rounded-lg px-4 py-2 text-white"
                  placeholder="Enter client name"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-dark-500 mb-2">Email *</label>
                <input
                  type="email"
                  value={newClient.email}
                  onChange={(e) => setNewClient({...newClient, email: e.target.value})}
                  className="w-full bg-dark-300 border border-dark-400 rounded-lg px-4 py-2 text-white"
                  placeholder="client@example.com"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-dark-500 mb-2">Company</label>
                <input
                  type="text"
                  value={newClient.company}
                  onChange={(e) => setNewClient({...newClient, company: e.target.value})}
                  className="w-full bg-dark-300 border border-dark-400 rounded-lg px-4 py-2 text-white"
                  placeholder="Company name"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-dark-500 mb-2">Phone</label>
                <input
                  type="tel"
                  value={newClient.phone}
                  onChange={(e) => setNewClient({...newClient, phone: e.target.value})}
                  className="w-full bg-dark-300 border border-dark-400 rounded-lg px-4 py-2 text-white"
                  placeholder="+1 (555) 123-4567"
                />
              </div>
            </div>

            <div className="flex justify-end space-x-3 mt-6">
              <button
                onClick={() => setShowNewClientModal(false)}
                className="px-4 py-2 text-dark-500 hover:text-white transition-colors duration-200"
              >
                Cancel
              </button>
              <button
                onClick={createNewClient}
                className="bg-secondary hover:bg-secondary/90 text-white font-semibold py-2 px-4 rounded-lg transition-all duration-200"
              >
                Add Client
              </button>
            </div>
          </motion.div>
        </div>
      )}
    </div>
  )
}

export default Dashboard